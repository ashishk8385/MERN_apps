const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");

const app = express();

app.set('view engine', 'ejs');

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

mongoose.connect("mongodb://0.0.0.0:27017/todolistDB", { useNewUrlParser: true, useUnifiedTopology: true });

const itemsSchema = new mongoose.Schema({
  name: String
});

const Item = mongoose.model("Item", itemsSchema);

const item1 = new Item({
  name: "Welcome to your todolist!"
});

const item2 = new Item({
  name: "Hit the + button to add a new item."
});

const item3 = new Item({
  name: "<-- Hit this to delete an item."
});

const defaultItems = [item1, item2, item3];

// Insert default items only after the database connection is established
mongoose.connection.once("open", function () {
  Item.insertMany(defaultItems)
    .then(() => {
      console.log("Successfully saved default items to DB.");
    })
    .catch((err) => {
      console.log(err);
    });
});

app.get("/", function (req, res) {
  // Fetch items from the database and pass them to the view
  Item.find({}, function (err, items) {
    res.render("list", { listTitle: "Today", newListItems: items });
  });
});

app.post("/", function (req, res) {
  const item = req.body.newItem;

  // Create a new item based on the schema
  const newItem = new Item({
    name: item
  });

  // Save the new item to the database
  newItem.save();

  res.redirect("/");
});

app.get("/work", function (req, res) {
  // Fetch work items from the database and pass them to the view
  Item.find({}, function (err, workItems) {
    res.render("list", { listTitle: "Work List", newListItems: workItems });
  });
});

app.get("/about", function (req, res) {
  res.render("about");
});

app.listen(3000, function () {
  console.log("Server started on port 3000");
});
